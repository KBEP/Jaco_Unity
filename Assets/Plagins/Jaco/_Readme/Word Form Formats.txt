ОИСАНИЕ TSV-ФАЙЛОВ С ДАННЫМИ СЛОВОФОРМ.



Файл могут содержать заголовок с дополнительными данными вида (подробнее см. HeaderParser):

[ key0 = value0; key1 = value1; ... ; keyN = valueN ]



Сейчас задана только версия: [version = 0]



Далее идут блоки с описанием словоформ.



Каждый блок может содержать заголовок с дополнительными данными, формат тот же что и у заголовка файла. Сейчас задаётся 
только имя внутреннего метода трансляции числа в модификатор числа (подробнее см. ModHelper.GetNumToModMethod).



Далее в блоке идёт таблица в одном из двух форматов.



ФОРМАТЫ ОПИСАНИЯ СЛОВОФОРМ



Формат таблицы №1:

Обычный 2-мерный массив. Соответственно у слова может быть только два модификатора. Первая ячейка пуста - это маркер, что данные в Формате №2.

+------+------+------+------+
|      | mod1 | mod2 | mod3 |
+------+------+------+------+
| modA |  w   |  w   |  w   |
+------+------+------+------+
| modB |  w   |  w   |  w   |
+------+------+------+------+
| modB |  w   |  w   |  w   |
+------+------+------+------+



Формат таблицы №2:

Представляет N-мерный массив. Все столбцы кроме  последнего - это списки модификаторов.

+----------------+----------------+----------------+-----+
| mod1,mod2,mod3 | modA,modB,modC | modX,modY,modZ |  w  |
+----------------+----------------+----------------+-----+
| mod1,mod2,mod3 | modA,modB,modC | modX,modY,modZ |  w  |
+----------------+----------------+----------------+-----+
| mod1,mod2,mod3 | modA,modB,modC | modX,modY,modZ |  w  |
+----------------+----------------+----------------+-----+
| mod1,mod2,mod3 | modA,modB,modC | modX,modY,modZ |  w  |
+----------------+----------------+----------------+-----+
| mod1,mod2,mod3 | modA,modB,modC | modX,modY,modZ |  w  |
+----------------+----------------+----------------+-----+



В обоих форматах w - это форма слова, либо паттерн по которому она должна быть сгенерирована.

Паттерны применяются к Базовой форме слова.

Виды паттернов:

+xyz - добавит символы xyz в конец базовой формы слова, например: load и +ing -> loading;
xyz+ - добавит символы xyz в начало базовой формы слова, например: load и over+ -> overload;
~xyz - найдёт первое вхождение x с конца слова, все символы, начиная с x, заменит на xyz, например: wolf и +lves -> wolves
xyz~ - найдёт первое вхождение z c начала слова, все символы до и включая z заменит на xyz, например: production и intro~ -> introduction;

Патерны можно комбинировать:

abc++xyz - load и over++ing -> overloading
abc+~xyz
abc~+xyz
abc~~xyz



